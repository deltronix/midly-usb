[package]
name = "midly-usb"
version = "0.1.1"
edition = "2021"
authors = ["deltronix"]
include = [
  "/src/*",
  "/Cargo.toml",
]
description = "Fast MIDI decoder and encoder both for .mid files and real-time MIDI events"
repository = "https://github.com/negamartin/midly"
readme = "README.md"
keywords = ["midi", "no_std", "audio", "parser"]
categories = ["multimedia::audio", "multimedia::encoding", "multimedia"]
license = "Unlicense"
crate-type = ["dylib"]
[features]
default = ["alloc", "std", "parallel", "embedded"]

# Reject corrupted or uncompliant files, even if they could be read anyway.
#
# `ErrorKind::Malformed` errors will only be raised when this feature is enabled.
strict = []

# Enable the `alloc` dependency.
#
# Disabling this feature leaves pretty much only the raw `parse` and `write` functions, but makes
# the crate fully `no_std`.
# If this feature is enabled, but the `std` feature is not, the crate becomes `no_std + alloc`.
alloc = []

# Integrate with the `std` library.
# Depends on the `alloc` feature.
std = ["alloc"]

# Enable multithreaded parsing.
# Depends on the `std` feature.
#
# Multithreaded parsing is automatically disabled for tiny MIDI files.
# Currently, multithreading brings in the `rayon` dependency.
parallel = ["std", "rayon"]

# Enable embedded device usage
embedded = ["usb-device", "embedded-hal", "nb"] 


[dependencies]
rayon = { version="1", optional = true }
usb-device = { version="0.2.9", optional = true}
embedded-hal = {version="0.2.7", optional = true}
nb = {version = "1.1.0", optional = true }
cortex-m = "0.7.7"
cortex-m-rt = "0.7.3"

